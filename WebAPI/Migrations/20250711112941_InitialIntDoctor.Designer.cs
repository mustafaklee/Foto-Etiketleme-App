// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.Data;

#nullable disable

namespace WebAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250711112941_InitialIntDoctor")]
    partial class InitialIntDoctor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "doktor",
                            NormalizedName = "DOKTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebAPI.Models.Domain.BreastBirads", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("BreastBirads");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "BI-RADS 1"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "BI-RADS 2"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "BI-RADS 3"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "BI-RADS 4"
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "BI-RADS 5"
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "BI-RADS 6"
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Domain.BreastBiradsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BreastBiradsId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BreastBiradsId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ImageId");

                    b.ToTable("BreastBiradsEntities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BreastBiradsId = 1,
                            DoctorId = 2,
                            ImageId = 1
                        },
                        new
                        {
                            Id = 2,
                            BreastBiradsId = 2,
                            DoctorId = 3,
                            ImageId = 1
                        },
                        new
                        {
                            Id = 3,
                            BreastBiradsId = 4,
                            DoctorId = 2,
                            ImageId = 2
                        },
                        new
                        {
                            Id = 4,
                            BreastBiradsId = 3,
                            DoctorId = 3,
                            ImageId = 2
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Domain.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "858a670f-98c3-438f-8832-69e7aa23eeff",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEHBQV+jd9AUcb06AT0FgkPcK9T1s09s3uzyw/ayO7vPp8n5Tf2L1U53zpU65xOtsw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5f881e38-e762-4a64-8cf0-f55b056221e9",
                            Email = "doctorA@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTORA@EXAMPLE.COM",
                            NormalizedUserName = "DOCTORA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDFSMECxfbrNyB7BRF5tvn0z6yaSfyRViQRwclezQnwLKIUAgnMMj2SWpQ7IftixVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "doctorA@example.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a6046bb0-bbfd-4db4-8006-d36fa7fdd280",
                            Email = "doctorB@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTORB@EXAMPLE.COM",
                            NormalizedUserName = "DOCTORB@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJJ5wFAIcuyV4UHj3YOnihCTF02+VLKdlLbmBVy9GLik6P07/Q+kfr5WYjodxrkyAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "doctorB@example.com"
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Domain.FindingCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("FindingCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Mass"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Global Asymmetry"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Architectural Distortion"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Nipple Retraction"
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Suspicious Calcification"
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Focal Asymmetry"
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "Asymmetry"
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Domain.FindingCategoriesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("FindingCategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("FindingCategoriesId");

                    b.HasIndex("ImageId");

                    b.ToTable("FindingCategoriesEntities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorId = 2,
                            FindingCategoriesId = 1,
                            ImageId = 1
                        },
                        new
                        {
                            Id = 2,
                            DoctorId = 2,
                            FindingCategoriesId = 2,
                            ImageId = 1
                        },
                        new
                        {
                            Id = 3,
                            DoctorId = 3,
                            FindingCategoriesId = 3,
                            ImageId = 1
                        },
                        new
                        {
                            Id = 4,
                            DoctorId = 3,
                            FindingCategoriesId = 4,
                            ImageId = 1
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Domain.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FolderPath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("patient_age")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Folder");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FolderPath = "0a0c5108270e814818c1ad002482ce74",
                            patient_age = 0
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Domain.FolderDoctorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("FolderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("FolderId");

                    b.ToTable("FolderDoctorEntities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorId = 2,
                            FolderId = 1
                        },
                        new
                        {
                            Id = 2,
                            DoctorId = 3,
                            FolderId = 1
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Domain.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FolderId")
                        .HasColumnType("int");

                    b.Property<string>("FotografPath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("laterality_id")
                        .HasColumnType("int");

                    b.Property<int>("view_position_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("laterality_id");

                    b.HasIndex("view_position_id");

                    b.ToTable("Image");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FolderId = 1,
                            FotografPath = "0a6a90bdc088e0cc62df8d2d58d14840.png",
                            laterality_id = 1,
                            view_position_id = 2
                        },
                        new
                        {
                            Id = 2,
                            FolderId = 1,
                            FotografPath = "1b66d3ea1dae116b7c0e87e3caab3340.png",
                            laterality_id = 2,
                            view_position_id = 1
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Domain.laterality", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("laterality_name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("laterality");

                    b.HasData(
                        new
                        {
                            id = 1,
                            laterality_name = "R"
                        },
                        new
                        {
                            id = 2,
                            laterality_name = "L"
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Domain.view_position", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("view_position_name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("view_position");

                    b.HasData(
                        new
                        {
                            id = 1,
                            view_position_name = "CC"
                        },
                        new
                        {
                            id = 2,
                            view_position_name = "MLO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("WebAPI.Models.Domain.Doctor", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("WebAPI.Models.Domain.Doctor", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Domain.Doctor", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("WebAPI.Models.Domain.Doctor", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAPI.Models.Domain.BreastBiradsEntity", b =>
                {
                    b.HasOne("WebAPI.Models.Domain.BreastBirads", "BreastBirads")
                        .WithMany("BreastBiradsEntities")
                        .HasForeignKey("BreastBiradsId");

                    b.HasOne("WebAPI.Models.Domain.Doctor", "Doctor")
                        .WithMany("BreastBiradsEntities")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Domain.Image", "Image")
                        .WithMany("BreastBiradsEntities")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BreastBirads");

                    b.Navigation("Doctor");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("WebAPI.Models.Domain.FindingCategoriesEntity", b =>
                {
                    b.HasOne("WebAPI.Models.Domain.Doctor", "Doctor")
                        .WithMany("FindingCategoriesEntities")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Domain.FindingCategories", "FindingCategories")
                        .WithMany("FindingCategoriesEntities")
                        .HasForeignKey("FindingCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Domain.Image", "Image")
                        .WithMany("FindingCategoriesEntities")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("FindingCategories");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("WebAPI.Models.Domain.FolderDoctorEntity", b =>
                {
                    b.HasOne("WebAPI.Models.Domain.Doctor", "Doctor")
                        .WithMany("FolderDoctorEntities")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Domain.Folder", "Folder")
                        .WithMany("FolderDoctorEntities")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("WebAPI.Models.Domain.Image", b =>
                {
                    b.HasOne("WebAPI.Models.Domain.Folder", "Folder")
                        .WithMany("Image")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Domain.laterality", "laterality")
                        .WithMany("Image")
                        .HasForeignKey("laterality_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Domain.view_position", "view_Position")
                        .WithMany("Image")
                        .HasForeignKey("view_position_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("laterality");

                    b.Navigation("view_Position");
                });

            modelBuilder.Entity("WebAPI.Models.Domain.BreastBirads", b =>
                {
                    b.Navigation("BreastBiradsEntities");
                });

            modelBuilder.Entity("WebAPI.Models.Domain.Doctor", b =>
                {
                    b.Navigation("BreastBiradsEntities");

                    b.Navigation("FindingCategoriesEntities");

                    b.Navigation("FolderDoctorEntities");
                });

            modelBuilder.Entity("WebAPI.Models.Domain.FindingCategories", b =>
                {
                    b.Navigation("FindingCategoriesEntities");
                });

            modelBuilder.Entity("WebAPI.Models.Domain.Folder", b =>
                {
                    b.Navigation("FolderDoctorEntities");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("WebAPI.Models.Domain.Image", b =>
                {
                    b.Navigation("BreastBiradsEntities");

                    b.Navigation("FindingCategoriesEntities");
                });

            modelBuilder.Entity("WebAPI.Models.Domain.laterality", b =>
                {
                    b.Navigation("Image");
                });

            modelBuilder.Entity("WebAPI.Models.Domain.view_position", b =>
                {
                    b.Navigation("Image");
                });
#pragma warning restore 612, 618
        }
    }
}
